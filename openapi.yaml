openapi: 3.0.0
info:
  title: Power Station API
  version: 1.0.0

x-json-schema-faker:
  minItems: 3

components:
  schemas:
    overview:
      $ref: "./components/overview.yaml"
    station:
      $ref: "./components/station.yaml"
    history:
      $ref: "./components/history.yaml"
    magazine:
      $ref: "./components/magazine.yaml"
    magazine_history:
      $ref: "./components/magazine_history.yaml"
    group:
      $ref: "./components/group.yaml"
    status:
      $ref: "./components/status.yaml"
    location:
      $ref: "./components/location.yaml"
    generator:
      $ref: "./components/generator.yaml"
    reading_float:
      $ref: "./components/reading_float.yaml"
    monetary_value:
      $ref: "./components/monetary_value.yaml"
    bypass_system:
      $ref: "./components/bypass_system.yaml"

paths:
  /overview:
    get:
      summary: Get an overview of aggregated data for UI
      description: Returns a high-level overview including stations, magazines, production, and financials for the dashboard.
      responses:
        "200":
          description: Aggregated overview data for the dashboard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/overview"

  /stations:
    get:
      summary: Get list of stations
      responses:
        "200":
          description: List of stations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/station"

  /stations/{id}:
    get:
      summary: Get a specific station by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: string
            description: The unique identifier of the station in RDS PS Format
            x-faker:
              helpers.replaceSymbols: "??#.??#.??#" # RDS PS Format
      responses:
        "200":
          description: A single station
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/station"
        "404":
          description: Station not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Station not found"

  /stations/{id}/history:
    get:
      summary: Get historical data for a specific station
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: string
            description: The ID of the station
            x-faker:
              helpers.replaceSymbols: "??#.??#.??#" # RDS PS Format
        - in: query
          name: start_date
          required: false
          schema:
            type: string
            format: date
          description: The start date for the historical data range (e.g., "2023-01-01")
        - in: query
          name: end_date
          required: false
          schema:
            type: string
            format: date
          description: The end date for the historical data range (e.g., "2023-01-31")
      responses:
        "200":
          description: Historical data for the specified station
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/history"
        "404":
          description: Station not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Station not found"

  /magazines:
    get:
      summary: Get list of water reservoirs (magazines) and their details
      responses:
        "200":
          description: List of water reservoirs with levels and deviations
          content:
            application/json:
              schema:
                type: array
                maxItems: 6
                items:
                  $ref: "#/components/schemas/magazine"

  /magazines/{id}:
    get:
      summary: Get a specific magazine by UUID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: string
            x-faker:
              helpers.replaceSymbols: "??#.??#.??#" # RDS PS Format
          description: The ID of the magazine
      responses:
        "200":
          description: A single magazine
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/magazine"
        "404":
          description: Magazine not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Magazine not found"

  /magazines/{id}/history:
    get:
      summary: Get historical data for a specific magazine
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: string
            x-faker:
              helpers.replaceSymbols: "??#.??#.??#" # RDS PS Format
        - in: query
          name: start_date
          required: false
          schema:
            type: string
            format: date
          description: The start date for the historical data range (e.g., "2023-01-01")
        - in: query
          name: end_date
          required: false
          schema:
            type: string
            format: date
          description: The end date for the historical data range (e.g., "2023-01-31")
      responses:
        "200":
          description: Historical data for the specified magazine
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/magazine_history"
        "404":
          description: Magazine not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Magazine not found"

  /bypass-systems:
    get:
      summary: Get a list of bypass systems
      responses:
        "200":
          description: A list of bypass systems
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bypass_system"

  /bypass-systems/{id}:
    get:
      summary: Get a specific bypass system by UUID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: string
            x-faker:
              helpers.replaceSymbols: "??#.??#.??#" # RDS PS Format
          description: The ID of the magazine
      responses:
        "200":
          description: A single bypass system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bypass_system"
        "404":
          description: Bypass system not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Bypass system not found"
